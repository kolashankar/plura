
'use client'

import React, { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Loader2, Plus, Trash2, Download, Bot, Sparkles, Wand2, ArrowRight } from 'lucide-react'
import { toast } from 'sonner'
import { useEditor } from '@/providers/editor/editor-provider'
import { EditorElement } from '@/providers/editor/editor-provider'
import { v4 } from 'uuid'
import FeatureGate from '@/components/ui/feature-gate'
import { usePlanRestrictions } from '@/hooks/use-plan-restrictions'

interface GeneratedComponent {
  id: string
  name: string
  description: string
  code: string
  preview: string
  element: EditorElement
}

const generateComponent = async (prompt: string): Promise<GeneratedComponent> => {
  const response = await fetch('/api/ai/generate-component-gemini', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ prompt }),
  })

  if (!response.ok) {
    throw new Error('Failed to generate component')
  }

  const data = await response.json()
  
  // Create a proper EditorElement for the AI component
  const componentElement: EditorElement = {
    id: v4(),
    type: 'aiComponent',
    name: data.name || 'Generated Component',
    styles: {
      display: 'flex',
      flexDirection: 'column',
      gap: '12px',
      padding: '24px',
      borderRadius: '12px',
      backgroundColor: '#ffffff',
      border: '2px solid #e2e8f0',
      boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',
      minHeight: '120px',
      width: '100%',
      position: 'relative',
      transition: 'all 0.3s ease',
    },
    content: {
      innerText: data.preview || `<div class="p-6 rounded-xl border-2 border-gray-200 bg-gradient-to-br from-white to-gray-50 shadow-lg hover:shadow-xl transition-all duration-300 max-w-md mx-auto">
        <div class="flex items-center gap-2 mb-3">
          <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
            <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-bold text-gray-900">${data.name || 'AI Component'}</h3>
        </div>
        <p class="text-gray-600 mb-4 leading-relaxed">${data.description || 'This component was generated by AI'}</p>
        <button class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg transition-colors duration-200 cursor-pointer font-medium" onclick="this.style.transform='scale(0.95)'; setTimeout(() => this.style.transform='scale(1)', 100)">
          Interact
        </button>
      </div>`,
      code: data.code || '',
    },
  }

  return {
    id: v4(),
    name: data.name || 'Generated Component',
    description: data.description || 'AI Generated Component',
    code: data.code || '',
    preview: data.preview || data.code || '',
    element: componentElement,
  }
}

export default function AIComponentGenerator() {
  const [prompt, setPrompt] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [generatedComponents, setGeneratedComponents] = useState<GeneratedComponent[]>([])
  const { dispatch, state } = useEditor()
  const { checkAIAccess, getRemainingCredits } = usePlanRestrictions()

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      toast.error('Please enter a component description')
      return
    }

    // Check AI access before generating
    if (!checkAIAccess()) {
      toast.error('AI credits exhausted. Please upgrade your plan to continue generating components.')
      return
    }

    setIsLoading(true)
    try {
      const component = await generateComponent(prompt)
      setGeneratedComponents(prev => [component, ...prev])
      toast.success('Component generated successfully!')
      setPrompt('')
    } catch (error) {
      console.error('Error generating component:', error)
      toast.error('Failed to generate component')
    } finally {
      setIsLoading(false)
    }
  }

  const handleAddToCanvas = (component: GeneratedComponent) => {
    // Find the body element or use the first available container
    const bodyElement = state.editor.elements.find(el => el.type === '__body')
    const containerId = bodyElement?.id || state.editor.elements[0]?.id

    if (!containerId) {
      toast.error('No container available to add component')
      return
    }

    dispatch({
      type: 'ADD_ELEMENT',
      payload: {
        containerId,
        elementDetails: component.element,
      },
    })

    toast.success(`${component.name} added to canvas!`)
  }

  const handleDeleteComponent = (componentId: string) => {
    setGeneratedComponents(prev => prev.filter(comp => comp.id !== componentId))
    toast.success('Component deleted')
  }

  const handleDownloadComponent = (component: GeneratedComponent) => {
    const blob = new Blob([component.code], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${component.name.toLowerCase().replace(/\s+/g, '-')}.tsx`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    toast.success('Component downloaded!')
  }

  // Make components draggable
  const handleDragStart = (e: React.DragEvent, component: GeneratedComponent) => {
    e.dataTransfer.setData('componentType', 'aiComponent')
    e.dataTransfer.setData('componentData', JSON.stringify(component.element))
    toast.success('Drag component to canvas to add it!')
  }

  const remainingCredits = getRemainingCredits('ai')

  return (
    <FeatureGate feature="ai-components">
      <div className="space-y-6 p-6">
        {/* Header Section */}
        <div className="space-y-3">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg">
              <Wand2 className="h-5 w-5 text-white" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-gray-900">AI Component Generator</h3>
              <p className="text-sm text-gray-500">Describe your component and let AI create it for you</p>
            </div>
            {typeof remainingCredits === 'number' && (
              <Badge variant="outline" className="text-xs">
                {remainingCredits} credits left
              </Badge>
            )}
          </div>
          <Separator />
        </div>

      {/* Generation Input */}
      <Card className="border-2 border-dashed border-gray-200 hover:border-blue-300 transition-colors">
        <CardContent className="p-4">
          <div className="space-y-3">
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <Sparkles className="h-4 w-4" />
              <span>Describe your component in detail</span>
            </div>
            <div className="flex gap-2">
              <Input
                placeholder="e.g., A pricing card with gradient background, icon, features list, and call-to-action button"
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && !isLoading && handleGenerate()}
                className="flex-1 h-11"
              />
              <Button 
                onClick={handleGenerate} 
                disabled={isLoading || !prompt.trim()}
                className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700"
              >
                {isLoading ? (
                  <Loader2 className="h-4 w-4 animate-spin" />
                ) : (
                  <>
                    <Bot className="h-4 w-4 mr-2" />
                    Generate
                  </>
                )}
              </Button>
            </div>
            <div className="flex gap-2 text-xs text-gray-500">
              <Badge variant="outline" className="text-xs">Modern UI</Badge>
              <Badge variant="outline" className="text-xs">Responsive</Badge>
              <Badge variant="outline" className="text-xs">Accessible</Badge>
              <Badge variant="outline" className="text-xs">Tailwind CSS</Badge>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Generated Components Section */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <h4 className="font-medium text-gray-900">Generated Components</h4>
            <Badge variant="secondary" className="bg-blue-100 text-blue-700">
              {generatedComponents.length}
            </Badge>
          </div>
          {generatedComponents.length > 0 && (
            <Badge variant="outline" className="text-xs">
              Drag to add to canvas
            </Badge>
          )}
        </div>

        {generatedComponents.length === 0 ? (
          <Card className="border-dashed border-2 border-gray-200">
            <CardContent className="p-8 text-center">
              <div className="mx-auto w-16 h-16 bg-gradient-to-br from-blue-100 to-purple-100 rounded-full flex items-center justify-center mb-4">
                <Bot className="h-8 w-8 text-blue-600" />
              </div>
              <h3 className="text-sm font-medium text-gray-900 mb-2">No components generated yet</h3>
              <p className="text-xs text-gray-500 mb-4">Describe a component above to get started with AI generation!</p>
              <div className="flex flex-wrap justify-center gap-2">
                <Badge variant="outline" className="text-xs">Try: "Contact form"</Badge>
                <Badge variant="outline" className="text-xs">Try: "Pricing card"</Badge>
                <Badge variant="outline" className="text-xs">Try: "Hero section"</Badge>
              </div>
            </CardContent>
          </Card>
        ) : (
          <div className="space-y-3 max-h-[400px] overflow-y-auto pr-2">
            {generatedComponents.map((component) => (
              <Card
                key={component.id}
                className="group cursor-grab hover:shadow-lg transition-all duration-300 border-l-4 border-l-blue-500 bg-gradient-to-r from-blue-50/30 to-purple-50/30"
                draggable
                onDragStart={(e) => handleDragStart(e, component)}
              >
                <CardHeader className="p-4 pb-2">
                  <div className="flex items-start justify-between">
                    <div className="space-y-1 flex-1">
                      <div className="flex items-center gap-2">
                        <Sparkles className="h-4 w-4 text-blue-500" />
                        <CardTitle className="text-sm font-semibold text-gray-900">
                          {component.name}
                        </CardTitle>
                      </div>
                      <p className="text-xs text-gray-600 leading-relaxed">
                        {component.description}
                      </p>
                    </div>
                    <Badge className="bg-gradient-to-r from-blue-500 to-purple-600 text-white text-xs">
                      <Bot className="h-3 w-3 mr-1" />
                      AI Generated
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="p-4 pt-0">
                  <div className="flex gap-2">
                    <Button
                      size="sm"
                      onClick={() => handleAddToCanvas(component)}
                      className="flex-1 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700"
                    >
                      <Plus className="h-3 w-3 mr-2" />
                      Add to Canvas
                      <ArrowRight className="h-3 w-3 ml-2" />
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleDownloadComponent(component)}
                      className="hover:bg-blue-50"
                    >
                      <Download className="h-3 w-3" />
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleDeleteComponent(component.id)}
                      className="hover:bg-red-50"
                    >
                      <Trash2 className="h-3 w-3" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
        </div>
      </div>
    </FeatureGate>
  )
}
