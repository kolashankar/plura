/**
 * Code generation service integrations
 * Supports TeleportHQ, Plasmic, Builder.io, and Sandpack
 */

export interface CodeGenerationOptions {
  format: 'react' | 'react-native' | 'python'
  funnel: any
  pages: any[]
  elements?: any[]
}

export interface GeneratedCode {
  files: Record<string, string>
  metadata: {
    framework: string
    generator: string
    timestamp: string
  }
}

/**
 * TeleportHQ integration for React/Next.js code generation
 */
export class TeleportHQGenerator {
  static async generateReactCode(options: CodeGenerationOptions): Promise<GeneratedCode> {
    // TeleportHQ API integration would go here
    // For now, return structured code based on funnel data
    
    const files: Record<string, string> = {}
    
    // Generate component structure based on TeleportHQ patterns
    files['components/FunnelLayout.tsx'] = this.generateLayoutComponent(options.funnel)
    
    options.pages.forEach((page, index) => {
      const componentName = page.name.replace(/\s+/g, '')
      files[`components/${componentName}.tsx`] = this.generatePageComponent(page, options.funnel)
    })
    
    // Add TeleportHQ-style utilities
    files['lib/teleport-utils.ts'] = this.generateTeleportUtils()
    files['styles/teleport-theme.css'] = this.generateTeleportTheme()
    
    return {
      files,
      metadata: {
        framework: 'React/Next.js',
        generator: 'TeleportHQ',
        timestamp: new Date().toISOString(),
      },
    }
  }
  
  private static generateLayoutComponent(funnel: any): string {
    return `// Generated by TeleportHQ - Professional Modern Layout
import React from 'react'
import { Menu, X, ChevronDown, ArrowRight, Star, Users, Shield } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Card } from '@/components/ui/card'
import { cn } from '@/lib/utils'

interface LayoutProps {
  children: React.ReactNode
  className?: string
}

export default function FunnelLayout({ children, className }: LayoutProps) {
  const [isMenuOpen, setIsMenuOpen] = React.useState(false)

  return (
    <div className={cn("min-h-screen bg-gradient-to-br from-gray-50 to-gray-100", className)}>
      {/* Modern Navigation Header */}
      <header className="sticky top-0 z-50 bg-white/80 backdrop-blur-lg border-b border-gray-200">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                <Star className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">${funnel.name}</h1>
                <p className="text-sm text-gray-500">Professional Funnel</p>
              </div>
            </div>
            
            <nav className="hidden md:flex items-center gap-6">
              <a href="#features" className="text-gray-600 hover:text-gray-900 transition-colors">Features</a>
              <a href="#pricing" className="text-gray-600 hover:text-gray-900 transition-colors">Pricing</a>
              <a href="#about" className="text-gray-600 hover:text-gray-900 transition-colors">About</a>
              <Button className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
                Get Started
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </nav>

            <button
              className="md:hidden p-2 text-gray-600 hover:text-gray-900"
              onClick={() => setIsMenuOpen(!isMenuOpen)}
            >
              {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </button>
          </div>

          {/* Mobile Menu */}
          {isMenuOpen && (
            <div className="md:hidden mt-4 p-4 bg-white rounded-lg shadow-lg border">
              <nav className="flex flex-col gap-4">
                <a href="#features" className="text-gray-600 hover:text-gray-900">Features</a>
                <a href="#pricing" className="text-gray-600 hover:text-gray-900">Pricing</a>
                <a href="#about" className="text-gray-600 hover:text-gray-900">About</a>
                <Button className="w-full bg-gradient-to-r from-blue-600 to-purple-600">
                  Get Started
                </Button>
              </nav>
            </div>
          )}
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-1">
        {children}
      </main>

      {/* Modern Footer */}
      <footer className="bg-gray-900 text-white py-12">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div className="col-span-1 md:col-span-2">
              <div className="flex items-center gap-3 mb-4">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                  <Star className="h-5 w-5 text-white" />
                </div>
                <span className="text-lg font-bold">${funnel.name}</span>
              </div>
              <p className="text-gray-400 mb-4">
                Professional funnel built with modern technology and best practices.
              </p>
              <div className="flex items-center gap-4">
                <Badge variant="outline" className="text-white border-gray-600">
                  <Users className="h-3 w-3 mr-1" />
                  10K+ Users
                </Badge>
                <Badge variant="outline" className="text-white border-gray-600">
                  <Shield className="h-3 w-3 mr-1" />
                  Secure
                </Badge>
              </div>
            </div>
            
            <div>
              <h3 className="font-semibold mb-4">Quick Links</h3>
              <ul className="space-y-2 text-gray-400">
                <li><a href="#" className="hover:text-white transition-colors">Features</a></li>
                <li><a href="#" className="hover:text-white transition-colors">Pricing</a></li>
                <li><a href="#" className="hover:text-white transition-colors">Support</a></li>
                <li><a href="#" className="hover:text-white transition-colors">Documentation</a></li>
              </ul>
            </div>
            
            <div>
              <h3 className="font-semibold mb-4">Contact</h3>
              <ul className="space-y-2 text-gray-400">
                <li>support@${funnel.name.toLowerCase().replace(/\s+/g, '')}.com</li>
                <li>+1 (555) 123-4567</li>
                <li>24/7 Support</li>
              </ul>
            </div>
          </div>
          
          <div className="border-t border-gray-800 mt-8 pt-8 text-center text-gray-400">
            <p>&copy; 2024 ${funnel.name}. All rights reserved. Built with modern technology.</p>
          </div>
        </div>
      </footer>
    </div>
  )
}`
  }
  
  private static generatePageComponent(page: any, funnel: any): string {
    return `// Generated by TeleportHQ - Professional Modern Page
import React from 'react'
import { 
  ArrowRight, 
  CheckCircle, 
  Star, 
  Zap, 
  Shield, 
  Users,
  BarChart3,
  TrendingUp,
  Clock,
  Award
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import FunnelLayout from './FunnelLayout'

export default function ${page.name.replace(/\s+/g, '')}() {
  const [email, setEmail] = React.useState('')

  const features = [
    {
      icon: <Zap className="h-6 w-6 text-blue-600" />,
      title: "Lightning Fast",
      description: "Built for speed and performance with modern optimization."
    },
    {
      icon: <Shield className="h-6 w-6 text-green-600" />,
      title: "Secure & Reliable",
      description: "Enterprise-grade security with 99.9% uptime guarantee."
    },
    {
      icon: <Users className="h-6 w-6 text-purple-600" />,
      title: "Team Collaboration",
      description: "Work together seamlessly with powerful collaboration tools."
    },
    {
      icon: <BarChart3 className="h-6 w-6 text-orange-600" />,
      title: "Analytics & Insights",
      description: "Make data-driven decisions with comprehensive analytics."
    }
  ]

  const testimonials = [
    {
      name: "Sarah Johnson",
      role: "CEO, TechCorp",
      content: "This solution transformed our business operations completely.",
      rating: 5
    },
    {
      name: "Michael Chen",
      role: "Product Manager",
      content: "Outstanding results and excellent customer support.",
      rating: 5
    },
    {
      name: "Emily Davis",
      role: "Marketing Director",
      content: "The best investment we've made for our company.",
      rating: 5
    }
  ]

  return (
    <FunnelLayout>
      {/* Hero Section */}
      <section className="relative py-20 px-4">
        <div className="container mx-auto text-center">
          <Badge className="mb-4 bg-blue-100 text-blue-700 hover:bg-blue-200">
            <Star className="h-3 w-3 mr-1" />
            ${page.name}
          </Badge>
          
          <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
            Welcome to{' '}
            <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              ${page.name}
            </span>
          </h1>
          
          <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
            Experience the future of digital solutions with our professional, 
            modern platform designed for success.
          </p>

          <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12">
            <Button size="lg" className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
              Get Started Free
              <ArrowRight className="ml-2 h-5 w-5" />
            </Button>
            <Button size="lg" variant="outline">
              Watch Demo
            </Button>
          </div>

          {/* Email Signup */}
          <div className="max-w-md mx-auto">
            <div className="flex gap-2">
              <Input
                type="email"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="flex-1"
              />
              <Button>Subscribe</Button>
            </div>
            <p className="text-sm text-gray-500 mt-2">
              Join 10,000+ professionals who trust our platform
            </p>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 px-4 bg-white">
        <div className="container mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Why Choose Our Platform?
            </h2>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Discover the features that make us the preferred choice for thousands of businesses worldwide.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {features.map((feature, index) => (
              <Card key={index} className="text-center hover:shadow-lg transition-shadow duration-300">
                <CardHeader>
                  <div className="w-12 h-12 mx-auto mb-4 bg-gray-100 rounded-lg flex items-center justify-center">
                    {feature.icon}
                  </div>
                  <CardTitle className="text-lg">{feature.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <CardDescription>{feature.description}</CardDescription>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-20 px-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white">
        <div className="container mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8 text-center">
            <div>
              <TrendingUp className="h-8 w-8 mx-auto mb-4" />
              <div className="text-3xl font-bold mb-2">99.9%</div>
              <div className="text-blue-100">Uptime</div>
            </div>
            <div>
              <Users className="h-8 w-8 mx-auto mb-4" />
              <div className="text-3xl font-bold mb-2">10K+</div>
              <div className="text-blue-100">Happy Users</div>
            </div>
            <div>
              <Award className="h-8 w-8 mx-auto mb-4" />
              <div className="text-3xl font-bold mb-2">50+</div>
              <div className="text-blue-100">Awards Won</div>
            </div>
            <div>
              <Clock className="h-8 w-8 mx-auto mb-4" />
              <div className="text-3xl font-bold mb-2">24/7</div>
              <div className="text-blue-100">Support</div>
            </div>
          </div>
        </div>
      </section>

      {/* Testimonials Section */}
      <section className="py-20 px-4 bg-gray-50">
        <div className="container mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              What Our Customers Say
            </h2>
            <p className="text-xl text-gray-600">
              Real feedback from real customers who love our platform.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {testimonials.map((testimonial, index) => (
              <Card key={index} className="hover:shadow-lg transition-shadow duration-300">
                <CardContent className="p-6">
                  <div className="flex mb-4">
                    {[...Array(testimonial.rating)].map((_, i) => (
                      <Star key={i} className="h-5 w-5 text-yellow-400 fill-current" />
                    ))}
                  </div>
                  <blockquote className="text-gray-600 mb-4">
                    "{testimonial.content}"
                  </blockquote>
                  <div>
                    <div className="font-semibold text-gray-900">{testimonial.name}</div>
                    <div className="text-gray-500 text-sm">{testimonial.role}</div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 px-4 bg-gray-900 text-white">
        <div className="container mx-auto text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            Ready to Get Started?
          </h2>
          <p className="text-xl text-gray-300 mb-8 max-w-2xl mx-auto">
            Join thousands of satisfied customers and transform your business today.
          </p>
          
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button size="lg" className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
              Start Free Trial
              <ArrowRight className="ml-2 h-5 w-5" />
            </Button>
            <Button size="lg" variant="outline" className="text-white border-gray-600 hover:bg-gray-800">
              Contact Sales
            </Button>
          </div>
          
          <p className="text-gray-400 mt-4">
            No credit card required • 14-day free trial • Cancel anytime
          </p>
        </div>
      </section>
    </FunnelLayout>
  )
}`
  }
  
  private static generateTeleportUtils(): string {
    return `// TeleportHQ utility functions
export const teleportConfig = {
  theme: 'funnel-theme',
  responsive: true,
  animations: true,
}

export function generateResponsiveClass(breakpoint: string): string {
  return \`responsive-\${breakpoint}\`
}

export function optimizeImages(src: string): string {
  return \`\${src}?w=800&h=600&fit=crop&auto=format\`
}`
  }
  
  private static generateTeleportTheme(): string {
    return `/* TeleportHQ Generated Theme */
.funnel-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.funnel-header {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 1rem;
  text-align: center;
}

.funnel-main {
  flex: 1;
  padding: 2rem;
}

.page-container {
  max-width: 1200px;
  margin: 0 auto;
}

.page-title {
  font-size: 2.5rem;
  margin-bottom: 2rem;
  text-align: center;
}

.page-content {
  line-height: 1.6;
}

@media (max-width: 768px) {
  .page-title {
    font-size: 2rem;
  }
  
  .funnel-main {
    padding: 1rem;
  }
}`
  }
}

/**
 * Plasmic integration for design-to-code generation
 */
export class PlasmicGenerator {
  static async generateReactCode(options: CodeGenerationOptions): Promise<GeneratedCode> {
    const files: Record<string, string> = {}
    
    // Generate Plasmic-style components
    files['plasmic-components/PlasmicFunnel.tsx'] = this.generatePlasmicComponent(options.funnel)
    files['plasmic-components/PlasmicPage.tsx'] = this.generatePlasmicPageComponent()
    files['plasmic-init.ts'] = this.generatePlasmicInit()
    
    options.pages.forEach((page, index) => {
      files[`pages/${page.pathName || `page-${index}`}.tsx`] = this.generatePlasmicPage(page, options.funnel)
    })
    
    return {
      files,
      metadata: {
        framework: 'React/Next.js',
        generator: 'Plasmic',
        timestamp: new Date().toISOString(),
      },
    }
  }
  
  private static generatePlasmicComponent(funnel: any): string {
    return `// Generated by Plasmic
import React from 'react'
import { PlasmicComponent } from '@plasmicapp/loader-nextjs'

interface PlasmicFunnelProps {
  funnelName: string
  pages: any[]
}

export default function PlasmicFunnel({ funnelName, pages }: PlasmicFunnelProps) {
  return (
    <div className="plasmic-funnel">
      <PlasmicComponent
        component="FunnelHeader"
        componentProps={{ title: funnelName }}
      />
      <div className="plasmic-content">
        {/* Dynamic content will be rendered here */}
      </div>
      <PlasmicComponent component="FunnelFooter" />
    </div>
  )
}`
  }
  
  private static generatePlasmicPageComponent(): string {
    return `// Generated by Plasmic
import React from 'react'
import { PlasmicComponent } from '@plasmicapp/loader-nextjs'

interface PlasmicPageProps {
  pageName: string
  content: string
}

export default function PlasmicPage({ pageName, content }: PlasmicPageProps) {
  return (
    <PlasmicComponent
      component="PageLayout"
      componentProps={{
        title: pageName,
        content: content,
      }}
    />
  )
}`
  }
  
  private static generatePlasmicInit(): string {
    return `// Plasmic initialization
import { initPlasmicLoader } from '@plasmicapp/loader-nextjs'

export const PLASMIC = initPlasmicLoader({
  projects: [
    {
      id: 'your-project-id',
      token: 'your-api-token',
    },
  ],
  preview: process.env.NODE_ENV === 'development',
})`
  }
  
  private static generatePlasmicPage(page: any, funnel: any): string {
    return `// Generated by Plasmic
import React from 'react'
import PlasmicPage from '../plasmic-components/PlasmicPage'

export default function ${page.name.replace(/\s+/g, '')}Page() {
  return (
    <PlasmicPage
      pageName="${page.name}"
      content={\`${page.content || 'Page content'}\`}
    />
  )
}`
  }
}

/**
 * Builder.io integration for visual development
 */
export class BuilderIOGenerator {
  static async generateReactCode(options: CodeGenerationOptions): Promise<GeneratedCode> {
    const files: Record<string, string> = {}
    
    // Generate Builder.io components
    files['builder/builder-config.ts'] = this.generateBuilderConfig()
    files['components/BuilderPage.tsx'] = this.generateBuilderPageComponent()
    
    options.pages.forEach((page, index) => {
      files[`pages/${page.pathName || `page-${index}`}.tsx`] = this.generateBuilderPage(page, options.funnel)
    })
    
    return {
      files,
      metadata: {
        framework: 'React/Next.js',
        generator: 'Builder.io',
        timestamp: new Date().toISOString(),
      },
    }
  }
  
  private static generateBuilderConfig(): string {
    return `// Builder.io configuration
import { builder } from '@builder.io/react'

// Initialize Builder.io
builder.init('your-api-key')

// Register custom components
builder.registerComponent(/* your components */)

export { builder }`
  }
  
  private static generateBuilderPageComponent(): string {
    return `// Generated by Builder.io
import React from 'react'
import { BuilderComponent, builder } from '@builder.io/react'

interface BuilderPageProps {
  model: string
  content?: any
}

export default function BuilderPage({ model, content }: BuilderPageProps) {
  return (
    <BuilderComponent
      model={model}
      content={content}
    />
  )
}`
  }
  
  private static generateBuilderPage(page: any, funnel: any): string {
    return `// Generated by Builder.io
import React from 'react'
import { GetStaticProps } from 'next'
import { builder } from '@builder.io/react'
import BuilderPage from '../components/BuilderPage'

interface PageProps {
  page: any
}

export default function ${page.name.replace(/\s+/g, '')}({ page }: PageProps) {
  return <BuilderPage model="page" content={page} />
}

export const getStaticProps: GetStaticProps = async () => {
  const page = await builder
    .get('page', {
      userAttributes: {
        urlPath: '${page.pathName}',
      },
    })
    .toPromise()

  return {
    props: {
      page: page || null,
    },
    revalidate: 5,
  }
}`
  }
}

/**
 * Sandpack integration for live code editing
 */
export class SandpackGenerator {
  static async generateReactCode(options: CodeGenerationOptions): Promise<GeneratedCode> {
    const files: Record<string, string> = {}
    
    // Generate Sandpack-compatible files
    files['src/App.js'] = this.generateSandpackApp(options.funnel)
    files['src/index.js'] = this.generateSandpackIndex()
    files['public/index.html'] = this.generateSandpackHTML(options.funnel)
    files['package.json'] = this.generateSandpackPackageJson(options.funnel)
    
    options.pages.forEach((page, index) => {
      files[`src/pages/${page.name.replace(/\s+/g, '')}.js`] = this.generateSandpackPage(page)
    })
    
    return {
      files,
      metadata: {
        framework: 'React',
        generator: 'Sandpack',
        timestamp: new Date().toISOString(),
      },
    }
  }
  
  private static generateSandpackApp(funnel: any): string {
    return `// Generated for Sandpack
import React from 'react'
import './App.css'

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>${funnel.name}</h1>
      </header>
      <main>
        <p>Welcome to your exported Sandpack project!</p>
      </main>
    </div>
  )
}

export default App`
  }
  
  private static generateSandpackIndex(): string {
    return `// Generated for Sandpack
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'

const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)`
  }
  
  private static generateSandpackHTML(funnel: any): string {
    return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${funnel.name}</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>`
  }
  
  private static generateSandpackPackageJson(funnel: any): string {
    return JSON.stringify({
      name: funnel.name.toLowerCase().replace(/\s+/g, '-'),
      version: '1.0.0',
      description: 'Generated by Plura for Sandpack',
      main: 'src/index.js',
      dependencies: {
        react: '^18.0.0',
        'react-dom': '^18.0.0',
        'react-scripts': '5.0.1',
      },
      scripts: {
        start: 'react-scripts start',
        build: 'react-scripts build',
      },
      browserslist: {
        production: ['>0.2%', 'not dead', 'not op_mini all'],
        development: ['last 1 chrome version', 'last 1 firefox version', 'last 1 safari version'],
      },
    }, null, 2)
  }
  
  private static generateSandpackPage(page: any): string {
    return `// Generated for Sandpack
import React from 'react'

export default function ${page.name.replace(/\s+/g, '')}Page() {
  return (
    <div>
      <h1>${page.name}</h1>
      <div>
        ${page.content ? 
          `<div dangerouslySetInnerHTML={{ __html: \`${page.content}\` }} />` :
          '<p>Page content will appear here</p>'
        }
      </div>
    </div>
  )
}`
  }
}

/**
 * React Native generator for mobile app export
 */
export class ReactNativeGenerator {
  static async generateCode(options: CodeGenerationOptions): Promise<GeneratedCode> {
    const files: Record<string, string> = {}
    
    // Generate React Native app structure
    files['App.tsx'] = this.generateApp(options.funnel)
    files['package.json'] = this.generatePackageJson(options.funnel)
    files['app.json'] = this.generateAppJson(options.funnel)
    
    // Generate components based on funnel elements
    if (options.elements) {
      files['components/ComponentLibrary.tsx'] = this.generateComponentLibrary(options.elements)
    }
    
    options.pages.forEach((page, index) => {
      files[`screens/${page.name.replace(/\s+/g, '')}Screen.tsx`] = this.generateScreen(page, options.funnel)
    })
    
    files['navigation/AppNavigator.tsx'] = this.generateNavigation(options.pages)
    files['styles/theme.ts'] = this.generateTheme()
    
    return {
      files,
      metadata: {
        framework: 'React Native',
        generator: 'React Native Generator',
        timestamp: new Date().toISOString(),
      },
    }
  }
  
  private static generateApp(funnel: any): string {
    return `import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { StatusBar, StyleSheet } from 'react-native';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import AppNavigator from './navigation/AppNavigator';
import { theme } from './styles/theme';

const Stack = createStackNavigator();

export default function App() {
  return (
    <SafeAreaProvider>
      <NavigationContainer theme={theme}>
        <StatusBar barStyle="dark-content" backgroundColor="#fff" />
        <AppNavigator />
      </NavigationContainer>
    </SafeAreaProvider>
  );
}`
  }
  
  private static generatePackageJson(funnel: any): string {
    return JSON.stringify({
      name: funnel.name.toLowerCase().replace(/\s+/g, '-'),
      version: '1.0.0',
      main: 'node_modules/expo/AppEntry.js',
      scripts: {
        start: 'expo start',
        android: 'expo start --android',
        ios: 'expo start --ios',
        web: 'expo start --web',
      },
      dependencies: {
        'expo': '~50.0.0',
        'react': '18.2.0',
        'react-native': '0.73.0',
        '@react-navigation/native': '^6.1.0',
        '@react-navigation/stack': '^6.3.0',
        'react-native-safe-area-context': '^4.7.0',
        'react-native-screens': '^3.25.0',
      },
      devDependencies: {
        '@babel/core': '^7.20.0',
        '@types/react': '~18.2.14',
        'typescript': '^5.1.3',
      },
    }, null, 2)
  }
  
  private static generateAppJson(funnel: any): string {
    return JSON.stringify({
      expo: {
        name: funnel.name,
        slug: funnel.name.toLowerCase().replace(/\s+/g, '-'),
        version: '1.0.0',
        orientation: 'portrait',
        icon: './assets/icon.png',
        userInterfaceStyle: 'light',
        splash: {
          image: './assets/splash.png',
          resizeMode: 'contain',
          backgroundColor: '#ffffff'
        },
        platforms: ['ios', 'android', 'web']
      }
    }, null, 2)
  }
  
  private static generateComponentLibrary(elements: any[]): string {
    return `import React from 'react';
import { View, Text, TouchableOpacity, ScrollView, TextInput, StyleSheet } from 'react-native';

// Component implementations for all dragged elements
${elements.map(element => this.generateNativeComponent(element)).join('\\n\\n')}

export { ${elements.map(element => `${element.type.charAt(0).toUpperCase() + element.type.slice(1)}Component`).join(', ')} };
`
  }
  
  private static generateNativeComponent(element: any): string {
    const componentName = `${element.type.charAt(0).toUpperCase() + element.type.slice(1)}Component`
    
    switch (element.type) {
      case 'text':
        return `export const ${componentName} = ({ content }: any) => (
  <Text style={styles.text}>{content?.innerText || 'Text Element'}</Text>
);`
      case 'button':
        return `export const ${componentName} = ({ content }: any) => (
  <TouchableOpacity style={styles.button}>
    <Text style={styles.buttonText}>{content?.innerText || 'Button'}</Text>
  </TouchableOpacity>
);`
      case 'input':
        return `export const ${componentName} = ({ content }: any) => (
  <TextInput
    style={styles.input}
    placeholder={content?.placeholder || 'Enter text...'}
  />
);`
      case 'navbar':
        return `export const ${componentName} = ({ content }: any) => (
  <View style={styles.navbar}>
    <Text style={styles.logo}>{content?.logo || 'Logo'}</Text>
  </View>
);`
      default:
        return `export const ${componentName} = ({ content }: any) => (
  <View style={styles.container}>
    <Text>Component: {content?.innerText || '${element.type}'}</Text>
  </View>
);`
    }
  }
  
  private static generateScreen(page: any, funnel: any): string {
    return `import React from 'react';
import { View, Text, ScrollView, StyleSheet } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

export default function ${page.name.replace(/\s+/g, '')}Screen() {
  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.content}>
        <Text style={styles.title}>{page.name}</Text>
        <Text style={styles.description}>Welcome to ${page.name}</Text>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  content: {
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  description: {
    fontSize: 16,
    color: '#666',
  },
});`
  }
  
  private static generateNavigation(pages: any[]): string {
    return `import React from 'react';
import { createStackNavigator } from '@react-navigation/stack';
${pages.map(page => `import ${page.name.replace(/\s+/g, '')}Screen from '../screens/${page.name.replace(/\s+/g, '')}Screen';`).join('\\n')}

const Stack = createStackNavigator();

export default function AppNavigator() {
  return (
    <Stack.Navigator initialRouteName="${pages[0]?.name.replace(/\s+/g, '') || 'Home'}">
      ${pages.map(page => `<Stack.Screen name="${page.name.replace(/\s+/g, '')}" component={${page.name.replace(/\s+/g, '')}Screen} />`).join('\\n      ')}
    </Stack.Navigator>
  );
}`
  }
  
  private static generateTheme(): string {
    return `export const theme = {
  colors: {
    primary: '#007adf',
    background: '#ffffff',
    card: '#ffffff',
    text: '#000000',
    border: '#e5e5e5',
    notification: '#ff3b30',
  },
  dark: false,
};

export const styles = {
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  text: {
    fontSize: 16,
    color: '#333',
  },
  button: {
    backgroundColor: '#007adf',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    padding: 12,
    borderRadius: 8,
    fontSize: 16,
  },
  navbar: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e5e5',
  },
  logo: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
};`
  }
}

/**
 * Python generator for backend/fullstack applications
 */
export class PythonGenerator {
  static async generateCode(options: CodeGenerationOptions): Promise<GeneratedCode> {
    const files: Record<string, string> = {}
    
    // Generate Python Flask/FastAPI app
    files['app.py'] = this.generateApp(options.funnel)
    files['requirements.txt'] = this.generateRequirements()
    files['models.py'] = this.generateModels(options.elements || [])
    files['routes.py'] = this.generateRoutes(options.pages, options.elements || [])
    files['config.py'] = this.generateConfig()
    
    // Generate templates for each page
    options.pages.forEach((page, index) => {
      files[`templates/${page.name.toLowerCase().replace(/\s+/g, '_')}.html`] = this.generateTemplate(page, options.funnel)
    })
    
    files['static/css/style.css'] = this.generateCSS()
    files['static/js/app.js'] = this.generateJavaScript()
    
    return {
      files,
      metadata: {
        framework: 'Python Flask',
        generator: 'Python Generator',
        timestamp: new Date().toISOString(),
      },
    }
  }
  
  private static generateApp(funnel: any): string {
    return `from flask import Flask, render_template, request, jsonify, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
import os
from models import db
from routes import init_routes

app = Flask(__name__)
app.config.from_object('config.Config')

# Initialize extensions
db.init_app(app)
CORS(app)

# Initialize routes
init_routes(app)

@app.route('/')
def index():
    return render_template('index.html', funnel_name='${funnel.name}')

@app.errorhandler(404)
def not_found(error):
    return render_template('404.html'), 404

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True, host='0.0.0.0', port=5000)`
  }
  
  private static generateRequirements(): string {
    return `Flask==2.3.3
Flask-SQLAlchemy==3.0.5
Flask-CORS==4.0.0
python-dotenv==1.0.0
Werkzeug==2.3.7
gunicorn==21.2.0`
  }
  
  private static generateModels(elements: any[]): string {
    return `from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    name = db.Column(db.String(80), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class FunnelData(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    data = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

${elements.filter(el => ['contactForm', 'newsletter', 'productCard'].includes(el.type)).map(element => 
  this.generateModelForElement(element)).join('\\n\\n')}
`
  }
  
  private static generateModelForElement(element: any): string {
    switch (element.type) {
      case 'contactForm':
        return `class ContactMessage(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), nullable=False)
    message = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)`
      case 'newsletter':
        return `class NewsletterSubscriber(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    subscribed_at = db.Column(db.DateTime, default=datetime.utcnow)`
      case 'productCard':
        return `class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    price = db.Column(db.Float, nullable=False)
    image_url = db.Column(db.String(500))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)`
      default:
        return ''
    }
  }
  
  private static generateRoutes(pages: any[], elements: any[]): string {
    return `from flask import render_template, request, jsonify, redirect, url_for
from models import db, User, FunnelData${elements.filter(el => ['contactForm', 'newsletter', 'productCard'].includes(el.type)).length > 0 ? ', ' + elements.filter(el => ['contactForm', 'newsletter', 'productCard'].includes(el.type)).map(el => this.getModelName(el.type)).join(', ') : ''}

def init_routes(app):
    
    @app.route('/api/health')
    def health_check():
        return jsonify({'status': 'healthy', 'timestamp': '${new Date().toISOString()}'})
    
    ${pages.map(page => `@app.route('/${page.pathName || page.name.toLowerCase().replace(/\s+/g, '-')}')
    def ${page.name.toLowerCase().replace(/\s+/g, '_')}():
        return render_template('${page.name.toLowerCase().replace(/\s+/g, '_')}.html')`).join('\\n    \\n    ')}
    
    ${elements.filter(el => ['contactForm', 'newsletter'].includes(el.type)).map(element => 
      this.generateAPIEndpoint(element)).join('\\n    \\n    ')}
`
  }
  
  private static getModelName(elementType: string): string {
    switch (elementType) {
      case 'contactForm': return 'ContactMessage'
      case 'newsletter': return 'NewsletterSubscriber'
      case 'productCard': return 'Product'
      default: return ''
    }
  }
  
  private static generateAPIEndpoint(element: any): string {
    switch (element.type) {
      case 'contactForm':
        return `@app.route('/api/contact', methods=['POST'])
    def submit_contact():
        data = request.json
        message = ContactMessage(
            name=data['name'],
            email=data['email'],
            message=data['message']
        )
        db.session.add(message)
        db.session.commit()
        return jsonify({'success': True, 'message': 'Message sent successfully'})`
      case 'newsletter':
        return `@app.route('/api/newsletter', methods=['POST'])
    def subscribe_newsletter():
        data = request.json
        subscriber = NewsletterSubscriber(email=data['email'])
        db.session.add(subscriber)
        db.session.commit()
        return jsonify({'success': True, 'message': 'Subscribed successfully'})`
      default:
        return ''
    }
  }
  
  private static generateTemplate(page: any, funnel: any): string {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${page.name} - ${funnel.name}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>${funnel.name}</h1>
        </header>
        
        <main class="main-content">
            <h2>${page.name}</h2>
            <p>Welcome to ${page.name}</p>
        </main>
        
        <footer class="footer">
            <p>&copy; 2024 ${funnel.name}. All rights reserved.</p>
        </footer>
    </div>
    
    <script src="{{ url_for('static', filename='js/app.js') }}"></script>
</body>
</html>`
  }
  
  private static generateConfig(): string {
    return `import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key'
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///app.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False`
  }
  
  private static generateCSS(): string {
    return `/* Generated CSS for Python Flask app */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #f8f9fa;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

.header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 2rem 0;
    text-align: center;
}

.main-content {
    padding: 2rem 0;
    min-height: 60vh;
}

.footer {
    background-color: #333;
    color: white;
    text-align: center;
    padding: 1rem 0;
}

.btn {
    display: inline-block;
    padding: 12px 24px;
    background-color: #007adf;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: background-color 0.3s;
}

.btn:hover {
    background-color: #0056b3;
}

.form-group {
    margin-bottom: 1rem;
}

.form-control {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 16px;
}

.card {
    background: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 1rem;
}`
  }
  
  private static generateJavaScript(): string {
    return `// Generated JavaScript for Python Flask app
document.addEventListener('DOMContentLoaded', function() {
    console.log('App initialized');
    
    // Handle form submissions
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', handleFormSubmit);
    });
    
    // Handle newsletter signups
    const newsletterForms = document.querySelectorAll('.newsletter-form');
    newsletterForms.forEach(form => {
        form.addEventListener('submit', handleNewsletterSubmit);
    });
});

async function handleFormSubmit(e) {
    e.preventDefault();
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData);
    
    try {
        const response = await fetch('/api/contact', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });
        
        const result = await response.json();
        if (result.success) {
            alert('Message sent successfully!');
            e.target.reset();
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error sending message. Please try again.');
    }
}

async function handleNewsletterSubmit(e) {
    e.preventDefault();
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData);
    
    try {
        const response = await fetch('/api/newsletter', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });
        
        const result = await response.json();
        if (result.success) {
            alert('Subscribed successfully!');
            e.target.reset();
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error subscribing. Please try again.');
    }
}`
  }
}

/**
 * Main code generation service that integrates all generators
 */
export class CodeGenerationService {
  static async generateCode(options: CodeGenerationOptions & { generator?: string }): Promise<GeneratedCode> {
    const { generator = 'default', format, ...codeOptions } = options
    
    // Handle format-specific generation
    if (format === 'react-native') {
      return ReactNativeGenerator.generateCode(options)
    }
    
    if (format === 'python') {
      return PythonGenerator.generateCode(options)
    }
    
    // React generators
    switch (generator) {
      case 'teleport':
        return TeleportHQGenerator.generateReactCode(codeOptions)
      case 'plasmic':
        return PlasmicGenerator.generateReactCode(codeOptions)
      case 'builder':
        return BuilderIOGenerator.generateReactCode(codeOptions)
      case 'sandpack':
        return SandpackGenerator.generateReactCode(codeOptions)
      default:
        // Use TeleportHQ as default for React
        return TeleportHQGenerator.generateReactCode(codeOptions)
    }
  }
  
  /**
   * Generate code based on elements that were drag-and-dropped
   */
  static async generateCodeFromElements(elements: any[], funnel: any, pages: any[]): Promise<{
    react: GeneratedCode
    reactNative: GeneratedCode
    python: GeneratedCode
  }> {
    const baseOptions = { funnel, pages, elements }
    
    return {
      react: await this.generateCode({ ...baseOptions, format: 'react' }),
      reactNative: await this.generateCode({ ...baseOptions, format: 'react-native' }),
      python: await this.generateCode({ ...baseOptions, format: 'python' }),
    }
  }
}