
import { NextRequest, NextResponse } from 'next/server'
import { currentUser } from '@clerk/nextjs'

export async function POST(req: NextRequest) {
  try {
    const user = await currentUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { funnelId, appName, platform, features } = await req.json()

    // Generate React Native code structure
    const mobileApp = {
      name: appName,
      platform: platform || 'expo',
      structure: {
        'App.tsx': generateAppTsx(appName),
        'package.json': generatePackageJson(appName, features),
        'app.json': generateAppJson(appName),
        'screens/HomeScreen.tsx': generateHomeScreen(),
        'components/Button.tsx': generateButton(),
        'navigation/AppNavigator.tsx': generateNavigator()
      },
      features: features || ['navigation', 'styling', 'state-management'],
      buildInstructions: [
        'npm install',
        'expo start',
        'expo build:android',
        'expo build:ios'
      ]
    }

    return NextResponse.json({
      success: true,
      mobileApp,
      downloadUrl: `/api/mobile/download/${funnelId}`
    })
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to generate mobile app' },
      { status: 500 }
    )
  }
}

function generateAppTsx(appName: string): string {
  return `// Professional React Native App - Generated by Plura
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, View, SafeAreaView } from 'react-native';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import { Provider as PaperProvider, MD3LightTheme } from 'react-native-paper';
import Toast from 'react-native-toast-message';
import AppNavigator from './navigation/AppNavigator';
import { ThemeProvider } from './context/ThemeContext';
import { AuthProvider } from './context/AuthContext';

// Modern theme configuration
const theme = {
  ...MD3LightTheme,
  colors: {
    ...MD3LightTheme.colors,
    primary: '#2563EB',
    primaryContainer: '#DBEAFE',
    secondary: '#7C3AED',
    secondaryContainer: '#EDE9FE',
    surface: '#FFFFFF',
    surfaceVariant: '#F8FAFC',
    background: '#F1F5F9',
    onPrimary: '#FFFFFF',
    onSecondary: '#FFFFFF',
    onSurface: '#1E293B',
    onBackground: '#0F172A',
  },
};

export default function App() {
  return (
    <GestureHandlerRootView style={styles.container}>
      <PaperProvider theme={theme}>
        <ThemeProvider>
          <AuthProvider>
            <SafeAreaView style={styles.container}>
              <StatusBar style="auto" backgroundColor={theme.colors.primary} />
              <NavigationContainer>
                <AppNavigator />
              </NavigationContainer>
              <Toast />
            </SafeAreaView>
          </AuthProvider>
        </ThemeProvider>
      </PaperProvider>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F1F5F9',
  },
});`
}

function generatePackageJson(appName: string, features: string[]): string {
  const dependencies: { [key: string]: string } = {
    'expo': '^50.0.0',
    'react': '18.2.0',
    'react-native': '0.73.0',
    '@react-navigation/native': '^6.1.9',
    '@react-navigation/stack': '^6.3.20',
    '@react-navigation/bottom-tabs': '^6.5.11',
    '@react-navigation/drawer': '^6.6.6',
    'react-native-paper': '^5.11.0',
    'react-native-vector-icons': '^10.0.0',
    'react-native-gesture-handler': '^2.14.0',
    'react-native-reanimated': '^3.6.0',
    'react-native-safe-area-context': '^4.7.4',
    'react-native-screens': '^3.27.0',
    'react-native-toast-message': '^2.1.6',
    'react-native-linear-gradient': '^2.8.3',
    '@expo/vector-icons': '^13.0.0',
    'expo-status-bar': '~1.7.1',
    'expo-linear-gradient': '~12.7.2',
    'expo-blur': '~12.9.2',
    'expo-haptics': '~12.8.1',
    'expo-image': '~1.10.1',
    'expo-font': '~11.10.0',
    'lottie-react-native': '^6.4.1'
  }

  if (features?.includes('state-management')) {
    dependencies['@reduxjs/toolkit'] = '^2.0.1'
    dependencies['react-redux'] = '^9.0.4'
    dependencies['redux-persist'] = '^6.0.0'
  }

  if (features?.includes('forms')) {
    dependencies['react-hook-form'] = '^7.48.2'
    dependencies['@hookform/resolvers'] = '^3.3.2'
    dependencies['yup'] = '^1.3.3'
  }

  if (features?.includes('networking')) {
    dependencies['axios'] = '^1.6.2'
    dependencies['react-query'] = '^3.39.3'
  }

  return JSON.stringify({
    name: appName.toLowerCase().replace(/\s+/g, '-'),
    version: '1.0.0',
    description: \`Professional mobile app: \${appName}\`,
    main: 'node_modules/expo/AppEntry.js',
    scripts: {
      start: 'expo start',
      android: 'expo start --android',
      ios: 'expo start --ios',
      web: 'expo start --web',
      build: 'expo build',
      'build:android': 'expo build:android',
      'build:ios': 'expo build:ios',
      eject: 'expo eject',
      test: 'jest',
      lint: 'eslint . --ext .js,.jsx,.ts,.tsx'
    },
    dependencies,
    devDependencies: {
      '@babel/core': '^7.23.0',
      '@types/react': '~18.2.45',
      '@types/react-native': '^0.72.6',
      'typescript': '^5.3.0',
      'jest': '^29.7.0',
      '@testing-library/react-native': '^12.4.0',
      'eslint': '^8.55.0',
      '@typescript-eslint/eslint-plugin': '^6.14.0',
      '@typescript-eslint/parser': '^6.14.0'
    },
    keywords: ['react-native', 'expo', 'mobile', 'app', 'professional'],
    author: 'Generated by Plura',
    license: 'MIT'
  }, null, 2)
}

function generateAppJson(appName: string): string {
  return JSON.stringify({
    expo: {
      name: appName,
      slug: appName.toLowerCase().replace(/\s+/g, '-'),
      version: '1.0.0',
      orientation: 'portrait',
      icon: './assets/icon.png',
      userInterfaceStyle: 'light',
      splash: {
        image: './assets/splash.png',
        resizeMode: 'contain',
        backgroundColor: '#ffffff'
      },
      assetBundlePatterns: ['**/*'],
      ios: {
        supportsTablet: true
      },
      android: {
        adaptiveIcon: {
          foregroundImage: './assets/adaptive-icon.png',
          backgroundColor: '#FFFFFF'
        }
      }
    }
  }, null, 2)
}

function generateHomeScreen(): string {
  return `// Professional Home Screen - Generated by Plura
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  Dimensions,
  Animated,
  TouchableOpacity,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { BlurView } from 'expo-blur';
import { StatusBar } from 'expo-status-bar';
import {
  Card,
  Button,
  Avatar,
  Badge,
  FAB,
  IconButton,
  Searchbar,
} from 'react-native-paper';
import {
  Ionicons,
  MaterialCommunityIcons,
  Feather,
} from '@expo/vector-icons';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { useTheme } from '../context/ThemeContext';
import { useAuth } from '../context/AuthContext';

const { width, height } = Dimensions.get('window');

export default function HomeScreen({ navigation }: any) {
  const insets = useSafeAreaInsets();
  const { theme } = useTheme();
  const { user } = useAuth();
  const [searchQuery, setSearchQuery] = useState('');
  const [fadeAnim] = useState(new Animated.Value(0));
  const [slideAnim] = useState(new Animated.Value(50));

  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true,
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      }),
    ]).start();
  }, []);

  const features = [
    {
      icon: 'rocket-outline',
      title: 'Quick Start',
      description: 'Get up and running in minutes',
      color: '#3B82F6',
      gradient: ['#3B82F6', '#1D4ED8'],
    },
    {
      icon: 'shield-checkmark-outline',
      title: 'Secure',
      description: 'Enterprise-grade security',
      color: '#10B981',
      gradient: ['#10B981', '#059669'],
    },
    {
      icon: 'analytics-outline',
      title: 'Analytics',
      description: 'Powerful insights & reports',
      color: '#8B5CF6',
      gradient: ['#8B5CF6', '#7C3AED'],
    },
    {
      icon: 'people-outline',
      title: 'Team',
      description: 'Collaborate seamlessly',
      color: '#F59E0B',
      gradient: ['#F59E0B', '#D97706'],
    },
  ];

  const quickActions = [
    { icon: 'add-circle', label: 'Create New', color: '#3B82F6' },
    { icon: 'search', label: 'Search', color: '#10B981' },
    { icon: 'bookmark', label: 'Saved', color: '#F59E0B' },
    { icon: 'settings', label: 'Settings', color: '#8B5CF6' },
  ];

  return (
    <View style={[styles.container, { paddingTop: insets.top }]}>
      <StatusBar style="light" />
      
      {/* Header with Gradient */}
      <LinearGradient
        colors={['#2563EB', '#7C3AED']}
        style={styles.header}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
      >
        <BlurView intensity={20} style={styles.headerContent}>
          <View style={styles.headerTop}>
            <View style={styles.userInfo}>
              <Avatar.Image
                size={45}
                source={{ uri: user?.avatar || 'https://via.placeholder.com/150' }}
                style={styles.avatar}
              />
              <View style={styles.userText}>
                <Text style={styles.greeting}>Good Morning</Text>
                <Text style={styles.userName}>{user?.name || 'John Doe'}</Text>
              </View>
            </View>
            <View style={styles.headerActions}>
              <IconButton
                icon="bell-outline"
                iconColor="#FFFFFF"
                size={24}
                onPress={() => {}}
              />
              <Badge visible={true} style={styles.notificationBadge}>
                3
              </Badge>
            </View>
          </View>
          
          <Searchbar
            placeholder="Search anything..."
            onChangeText={setSearchQuery}
            value={searchQuery}
            style={styles.searchBar}
            inputStyle={styles.searchInput}
            iconColor="#6B7280"
          />
        </BlurView>
      </LinearGradient>

      <ScrollView
        style={styles.content}
        showsVerticalScrollIndicator={false}
        bounces={true}
      >
        {/* Quick Actions */}
        <Animated.View
          style={[
            styles.section,
            {
              opacity: fadeAnim,
              transform: [{ translateY: slideAnim }],
            },
          ]}
        >
          <Text style={styles.sectionTitle}>Quick Actions</Text>
          <View style={styles.quickActionsGrid}>
            {quickActions.map((action, index) => (
              <TouchableOpacity
                key={index}
                style={[styles.quickAction, { backgroundColor: \`\${action.color}15\` }]}
                onPress={() => {}}
              >
                <Ionicons name={action.icon as any} size={28} color={action.color} />
                <Text style={[styles.quickActionText, { color: action.color }]}>
                  {action.label}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
        </Animated.View>

        {/* Features Grid */}
        <Animated.View
          style={[
            styles.section,
            {
              opacity: fadeAnim,
              transform: [{ translateY: slideAnim }],
            },
          ]}
        >
          <Text style={styles.sectionTitle}>Features</Text>
          <View style={styles.featuresGrid}>
            {features.map((feature, index) => (
              <TouchableOpacity key={index} style={styles.featureCard}>
                <LinearGradient
                  colors={feature.gradient}
                  style={styles.featureGradient}
                  start={{ x: 0, y: 0 }}
                  end={{ x: 1, y: 1 }}
                >
                  <Ionicons name={feature.icon as any} size={32} color="#FFFFFF" />
                </LinearGradient>
                <Text style={styles.featureTitle}>{feature.title}</Text>
                <Text style={styles.featureDescription}>{feature.description}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </Animated.View>

        {/* Stats Card */}
        <Animated.View
          style={[
            styles.section,
            {
              opacity: fadeAnim,
              transform: [{ translateY: slideAnim }],
            },
          ]}
        >
          <Card style={styles.statsCard}>
            <Card.Content>
              <Text style={styles.statsTitle}>Your Progress</Text>
              <View style={styles.statsGrid}>
                <View style={styles.statItem}>
                  <Text style={styles.statNumber}>127</Text>
                  <Text style={styles.statLabel}>Projects</Text>
                </View>
                <View style={styles.statItem}>
                  <Text style={styles.statNumber}>89%</Text>
                  <Text style={styles.statLabel}>Success Rate</Text>
                </View>
                <View style={styles.statItem}>
                  <Text style={styles.statNumber}>24</Text>
                  <Text style={styles.statLabel}>Team Members</Text>
                </View>
              </View>
            </Card.Content>
          </Card>
        </Animated.View>

        {/* Recent Activity */}
        <Animated.View
          style={[
            styles.section,
            {
              opacity: fadeAnim,
              transform: [{ translateY: slideAnim }],
            },
          ]}
        >
          <Text style={styles.sectionTitle}>Recent Activity</Text>
          {[1, 2, 3].map((item, index) => (
            <Card key={index} style={styles.activityCard}>
              <Card.Content style={styles.activityContent}>
                <Avatar.Icon
                  size={40}
                  icon="file-document"
                  style={[styles.activityIcon, { backgroundColor: features[index % 4].color + '20' }]}
                />
                <View style={styles.activityText}>
                  <Text style={styles.activityTitle}>Project Updated</Text>
                  <Text style={styles.activityDescription}>
                    Mobile app design completed
                  </Text>
                  <Text style={styles.activityTime}>2 hours ago</Text>
                </View>
                <IconButton
                  icon="chevron-right"
                  iconColor="#6B7280"
                  size={20}
                  onPress={() => {}}
                />
              </Card.Content>
            </Card>
          ))}
        </Animated.View>

        <View style={styles.bottomSpacing} />
      </ScrollView>

      {/* Floating Action Button */}
      <FAB
        style={[styles.fab, { backgroundColor: '#3B82F6' }]}
        icon="plus"
        onPress={() => {}}
        color="#FFFFFF"
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  header: {
    paddingBottom: 20,
  },
  headerContent: {
    padding: 20,
  },
  headerTop: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  userInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  avatar: {
    marginRight: 12,
  },
  userText: {
    flex: 1,
  },
  greeting: {
    color: '#E2E8F0',
    fontSize: 14,
  },
  userName: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
  },
  headerActions: {
    position: 'relative',
  },
  notificationBadge: {
    position: 'absolute',
    top: 5,
    right: 5,
    backgroundColor: '#EF4444',
  },
  searchBar: {
    backgroundColor: 'rgba(255, 255, 255, 0.15)',
    borderRadius: 25,
    elevation: 0,
  },
  searchInput: {
    color: '#FFFFFF',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  section: {
    marginTop: 20,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: '700',
    color: '#1E293B',
    marginBottom: 15,
  },
  quickActionsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  quickAction: {
    width: '48%',
    padding: 20,
    borderRadius: 16,
    alignItems: 'center',
    marginBottom: 12,
  },
  quickActionText: {
    marginTop: 8,
    fontSize: 14,
    fontWeight: '600',
  },
  featuresGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  featureCard: {
    width: '48%',
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  featureGradient: {
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 12,
  },
  featureTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1E293B',
    marginBottom: 4,
  },
  featureDescription: {
    fontSize: 13,
    color: '#64748B',
    lineHeight: 18,
  },
  statsCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  statsTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1E293B',
    marginBottom: 15,
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  statItem: {
    alignItems: 'center',
  },
  statNumber: {
    fontSize: 28,
    fontWeight: '700',
    color: '#3B82F6',
  },
  statLabel: {
    fontSize: 13,
    color: '#64748B',
    marginTop: 4,
  },
  activityCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    marginBottom: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  activityContent: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
  },
  activityIcon: {
    marginRight: 12,
  },
  activityText: {
    flex: 1,
  },
  activityTitle: {
    fontSize: 15,
    fontWeight: '600',
    color: '#1E293B',
  },
  activityDescription: {
    fontSize: 13,
    color: '#64748B',
    marginTop: 2,
  },
  activityTime: {
    fontSize: 12,
    color: '#94A3B8',
    marginTop: 4,
  },
  fab: {
    position: 'absolute',
    margin: 16,
    right: 0,
    bottom: 0,
    borderRadius: 28,
    elevation: 8,
  },
  bottomSpacing: {
    height: 100,
  },
});`
}

function generateButton(): string {
  return `// Professional Button Component - Generated by Plura
import React from 'react';
import {
  TouchableOpacity,
  Text,
  StyleSheet,
  ViewStyle,
  TextStyle,
  ActivityIndicator,
  View,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import * as Haptics from 'expo-haptics';

interface ButtonProps {
  title: string;
  onPress: () => void;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'gradient';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  loading?: boolean;
  icon?: string;
  iconPosition?: 'left' | 'right';
  style?: ViewStyle;
  textStyle?: TextStyle;
  fullWidth?: boolean;
}

export default function Button({
  title,
  onPress,
  variant = 'primary',
  size = 'medium',
  disabled = false,
  loading = false,
  icon,
  iconPosition = 'left',
  style,
  textStyle,
  fullWidth = false,
}: ButtonProps) {
  
  const handlePress = () => {
    if (!disabled && !loading) {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      onPress();
    }
  };

  const getButtonStyle = (): ViewStyle => {
    const baseStyle: ViewStyle = {
      ...styles.button,
      ...styles[\`button\${size.charAt(0).toUpperCase() + size.slice(1)}\`],
      ...(fullWidth && { width: '100%' }),
    };

    switch (variant) {
      case 'primary':
        return { ...baseStyle, ...styles.primaryButton };
      case 'secondary':
        return { ...baseStyle, ...styles.secondaryButton };
      case 'outline':
        return { ...baseStyle, ...styles.outlineButton };
      case 'ghost':
        return { ...baseStyle, ...styles.ghostButton };
      case 'gradient':
        return baseStyle;
      default:
        return { ...baseStyle, ...styles.primaryButton };
    }
  };

  const getTextStyle = (): TextStyle => {
    const baseStyle: TextStyle = {
      ...styles.buttonText,
      ...styles[\`buttonText\${size.charAt(0).toUpperCase() + size.slice(1)}\`],
    };

    switch (variant) {
      case 'primary':
        return { ...baseStyle, ...styles.primaryButtonText };
      case 'secondary':
        return { ...baseStyle, ...styles.secondaryButtonText };
      case 'outline':
        return { ...baseStyle, ...styles.outlineButtonText };
      case 'ghost':
        return { ...baseStyle, ...styles.ghostButtonText };
      case 'gradient':
        return { ...baseStyle, ...styles.gradientButtonText };
      default:
        return { ...baseStyle, ...styles.primaryButtonText };
    }
  };

  const buttonContent = (
    <View style={styles.buttonContent}>
      {loading ? (
        <ActivityIndicator
          size={size === 'small' ? 'small' : 'small'}
          color={variant === 'primary' || variant === 'gradient' ? '#FFFFFF' : '#3B82F6'}
        />
      ) : (
        <>
          {icon && iconPosition === 'left' && (
            <Ionicons
              name={icon as any}
              size={size === 'small' ? 16 : size === 'medium' ? 18 : 20}
              color={
                variant === 'primary' || variant === 'gradient'
                  ? '#FFFFFF'
                  : variant === 'outline' || variant === 'ghost'
                  ? '#3B82F6'
                  : '#FFFFFF'
              }
              style={styles.iconLeft}
            />
          )}
          <Text style={[getTextStyle(), textStyle, disabled && styles.disabledText]}>
            {title}
          </Text>
          {icon && iconPosition === 'right' && (
            <Ionicons
              name={icon as any}
              size={size === 'small' ? 16 : size === 'medium' ? 18 : 20}
              color={
                variant === 'primary' || variant === 'gradient'
                  ? '#FFFFFF'
                  : variant === 'outline' || variant === 'ghost'
                  ? '#3B82F6'
                  : '#FFFFFF'
              }
              style={styles.iconRight}
            />
          )}
        </>
      )}
    </View>
  );

  if (variant === 'gradient') {
    return (
      <TouchableOpacity
        onPress={handlePress}
        disabled={disabled || loading}
        style={[getButtonStyle(), style, disabled && styles.disabledButton]}
        activeOpacity={0.8}
      >
        <LinearGradient
          colors={disabled ? ['#E5E7EB', '#D1D5DB'] : ['#3B82F6', '#8B5CF6']}
          start={{ x: 0, y: 0 }}
          end={{ x: 1, y: 0 }}
          style={styles.gradientContainer}
        >
          {buttonContent}
        </LinearGradient>
      </TouchableOpacity>
    );
  }

  return (
    <TouchableOpacity
      onPress={handlePress}
      disabled={disabled || loading}
      style={[getButtonStyle(), style, disabled && styles.disabledButton]}
      activeOpacity={0.8}
    >
      {buttonContent}
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  button: {
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  buttonSmall: {
    paddingVertical: 8,
    paddingHorizontal: 16,
    minHeight: 36,
  },
  buttonMedium: {
    paddingVertical: 12,
    paddingHorizontal: 20,
    minHeight: 48,
  },
  buttonLarge: {
    paddingVertical: 16,
    paddingHorizontal: 24,
    minHeight: 56,
  },
  buttonContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  buttonText: {
    fontWeight: '600',
    textAlign: 'center',
  },
  buttonTextSmall: {
    fontSize: 14,
  },
  buttonTextMedium: {
    fontSize: 16,
  },
  buttonTextLarge: {
    fontSize: 18,
  },
  // Variant styles
  primaryButton: {
    backgroundColor: '#3B82F6',
  },
  primaryButtonText: {
    color: '#FFFFFF',
  },
  secondaryButton: {
    backgroundColor: '#F1F5F9',
  },
  secondaryButtonText: {
    color: '#1E293B',
  },
  outlineButton: {
    backgroundColor: 'transparent',
    borderWidth: 2,
    borderColor: '#3B82F6',
  },
  outlineButtonText: {
    color: '#3B82F6',
  },
  ghostButton: {
    backgroundColor: 'transparent',
  },
  ghostButtonText: {
    color: '#3B82F6',
  },
  gradientContainer: {
    flex: 1,
    width: '100%',
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
  },
  gradientButtonText: {
    color: '#FFFFFF',
  },
  // Icon styles
  iconLeft: {
    marginRight: 8,
  },
  iconRight: {
    marginLeft: 8,
  },
  // Disabled styles
  disabledButton: {
    opacity: 0.6,
  },
  disabledText: {
    opacity: 0.7,
  },
});`
}
    <TouchableOpacity 
      style={[styles.button, styles[variant]]} 
      onPress={onPress}
    >
      <Text style={[styles.text, styles[\`\${variant}Text\`]]}>{title}</Text>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  button: {
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  primary: {
    backgroundColor: '#007AFF',
  },
  secondary: {
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: '#007AFF',
  },
  text: {
    fontSize: 16,
    fontWeight: '600',
  },
  primaryText: {
    color: 'white',
  },
  secondaryText: {
    color: '#007AFF',
  },
});`
}

function generateNavigator(): string {
  return `import React from 'react';
import { createStackNavigator } from '@react-navigation/stack';
import HomeScreen from '../screens/HomeScreen';

const Stack = createStackNavigator();

export default function AppNavigator() {
  return (
    <Stack.Navigator
      initialRouteName="Home"
      screenOptions={{
        headerStyle: {
          backgroundColor: '#007AFF',
        },
        headerTintColor: '#fff',
        headerTitleStyle: {
          fontWeight: 'bold',
        },
      }}
    >
      <Stack.Screen name="Home" component={HomeScreen} />
    </Stack.Navigator>
  );
}`
}
