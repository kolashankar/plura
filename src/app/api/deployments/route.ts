import { NextRequest, NextResponse } from 'next/server'
import { currentUser } from '@clerk/nextjs'
import { db } from '@/lib/db'

export async function GET(req: NextRequest) {
  try {
    const user = await currentUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { searchParams } = new URL(req.url)
    const deploymentId = searchParams.get('deploymentId')

    if (deploymentId) {
      // Get specific deployment
      const deployment = await db.deployment.findUnique({
        where: { id: deploymentId },
        include: {
          subAccount: true
        }
      })

      if (!deployment) {
        return NextResponse.json({ error: 'Deployment not found' }, { status: 404 })
      }

      return NextResponse.json({ deployment })
    }

    // Get all deployments for user
    const deployments = await db.deployment.findMany({
      where: {
        OR: [
          { subAccount: { Agency: { userId: user.id } } },
          { createdBy: user.id }
        ]
      },
      include: {
        subAccount: {
          select: { name: true }
        }
      },
      orderBy: { createdAt: 'desc' }
    })

    return NextResponse.json({ deployments })

  } catch (error) {
    console.error('Error fetching deployments:', error)
    return NextResponse.json(
      { error: 'Failed to fetch deployments' },
      { status: 500 }
    )
  }
}

export async function POST(req: NextRequest) {
  try {
    const user = await currentUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const {
      name,
      type,
      subaccountId,
      funnelPageId,
      reactCode,
      reactNativeCode,
      pythonCode,
      platform = 'web'
    } = await req.json()

    if (!name) {
      return NextResponse.json(
        { error: 'Deployment name is required' },
        { status: 400 }
      )
    }

    // Create deployment record
    const deploymentId = `dep_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    
    const deployment = await db.deployment.create({
      data: {
        id: deploymentId,
        name,
        type: type || 'website',
        status: 'building',
        platform,
        subAccountId: subaccountId,
        createdBy: user.id,
        url: '', // Will be updated after deployment
        codeStructure: JSON.stringify({
          react: reactCode,
          reactNative: reactNativeCode,
          python: pythonCode,
          platform,
          timestamp: new Date().toISOString()
        })
      }
    })

    // Generate deployment URL
    const baseUrl = process.env.REPL_URL || process.env.REPLIT_DEV_DOMAIN || 'https://generated-sites.replit.app'
    const deploymentUrl = `${baseUrl}/deployed/${deploymentId}`

    // Update deployment with URL
    await db.deployment.update({
      where: { id: deploymentId },
      data: {
        url: deploymentUrl,
        status: 'deployed'
      }
    })

    // Store generated code in separate table for better access
    await db.generatedCode.create({
      data: {
        id: `code_${deploymentId}`,
        funnelPageId: funnelPageId || deploymentId,
        reactCode: reactCode || '',
        reactNativeCode: reactNativeCode || '',
        pythonCode: pythonCode || '',
        elements: JSON.stringify([]),
        metadata: JSON.stringify({
          deploymentId,
          platform,
          generatedAt: new Date().toISOString(),
          generatedBy: user.id
        }),
        isAutoGenerated: true
      }
    })

    return NextResponse.json({
      success: true,
      deployment: {
        id: deploymentId,
        name,
        url: deploymentUrl,
        status: 'deployed',
        platform,
        createdAt: deployment.createdAt
      }
    })

  } catch (error) {
    console.error('Error creating deployment:', error)
    return NextResponse.json(
      { error: 'Failed to create deployment' },
      { status: 500 }
    )
  }
}

export async function DELETE(req: NextRequest) {
  try {
    const user = await currentUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { searchParams } = new URL(req.url)
    const deploymentId = searchParams.get('deploymentId')

    if (!deploymentId) {
      return NextResponse.json(
        { error: 'Deployment ID is required' },
        { status: 400 }
      )
    }

    // Check if user owns this deployment
    const deployment = await db.deployment.findUnique({
      where: { id: deploymentId },
      include: {
        subAccount: {
          include: {
            Agency: true
          }
        }
      }
    })

    if (!deployment) {
      return NextResponse.json({ error: 'Deployment not found' }, { status: 404 })
    }

    const isOwner = deployment.createdBy === user.id || 
                   deployment.subAccount?.Agency?.userId === user.id

    if (!isOwner) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 })
    }

    // Delete deployment and related code
    await db.generatedCode.deleteMany({
      where: {
        metadata: {
          contains: deploymentId
        }
      }
    })

    await db.deployment.delete({
      where: { id: deploymentId }
    })

    return NextResponse.json({ success: true })

  } catch (error) {
    console.error('Error deleting deployment:', error)
    return NextResponse.json(
      { error: 'Failed to delete deployment' },
      { status: 500 }
    )
  }
}